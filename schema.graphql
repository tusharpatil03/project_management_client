directive @auth on FIELD_DEFINITION

directive @role(requires: [MemberRole]!) on FIELD_DEFINITION

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AuthData {
  accessToken: String!
  refreshToken: String!
}

type ExtendSession {
  accessToken: String
  refreshToken: String
}

type User {
  id: ID!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  isVerified: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  projects: [Project]
  teams: [UserTeam]
  createdTeams: [Team]
  createdIssues: [Issue]
  assignedIssues: [Issue]
  profile: profile
  activities: [Activity]
  comments: [Comment]
}

type Activity {
  id: ID!
  action: ActivityAction!
  entityType: EntityType!
  entityId: String
  entityName: String
  description: String
  user: User
  project: Project
  sprint: Sprint
  issue: Issue
  team: Team
  createdAt: DateTime
}

type profile {
  id: ID!
  gender: Gender
  phone: String
  avatar: String
  bio: String
  social: Social
  createdAt: DateTime
  updatedAt: DateTime
  userId: ID
  user: User
}

type Social {
  id: ID!
  github: String
  facebook: String
  twitter: String
  linkedin: String
  createdAt: DateTime
  updatedAt: DateTime
}

type Project {
  id: ID!
  key: String!
  name: String!
  description: String
  starred: Boolean
  creator: User
  creatorId: ID
  status: ProjectStatus
  createdAt: DateTime
  updatedAt: DateTime
  teams: [ProjectTeam]
  sprints: [Sprint]
  issues: [Issue]
  activities: [Activity]
}

type Team {
  id: ID!
  name: String
  creatorId: ID
  creator: User
  createdAt: DateTime
  updatedAt: DateTime
  projects: [ProjectTeam]
  users: [UserTeam]
  activities: [Activity]
}

type UserTeam {
  id: ID!
  user: User
  userId: ID
  teamId: ID
  team: Team
  role: MemberRole
  joinedAt: DateTime
}

type ProjectTeam {
  id: ID!
  project: Project
  team: Team
  joinedAt: DateTime
  projectId: ID
  teamId: ID
}

type Issue {
  id: ID!
  key: String!
  title: String!
  description: String
  status: IssueStatus
  priority: IssuePriority
  createdAt: DateTime
  updatedAt: DateTime
  dueDate: DateTime
  type: IssueType
  creator: User
  creatorId: ID
  assigneeId: ID
  assignee: User
  projectId: ID
  project: Project
  sprintId: ID
  sprint: Sprint
  comments: [Comment]
  activities: [Activity]
}

type Comment {
  id: ID!
  content: String!
  issue: Issue
  author: User
  createdAt: DateTime
  updatedAt: DateTime
}

type Sprint {
  id: ID!
  key: String!
  startDate: DateTime
  dueDate: DateTime
  title: String
  description: String
  status: SprintStatus
  createdAt: DateTime
  updatedAt: DateTime
  creatorId: ID
  creator: User
  projectId: ID
  project: Project
  issues: [Issue]
  activities: [Activity]
}

type ResponseMessage {
  success: Boolean!
  status: Int
  message: String
}

type activeSprintStat {
  totalIssues: Int
  openIssues: Int
  closedIssues: Int
  inProgressIssues: Int
}

type ProjectStat {
  totalIssues: Int
  openIssues: Int
  closedIssues: Int
  inProgressIssues: Int
  totalSprints: Int
  activeSprintStat: activeSprintStat
}

input LoginInput {
  email: EmailAddress!
  password: String!
}

input SignupInput {
  email: EmailAddress!
  password: Password!
  firstName: String!
  lastName: String!
}

input CreateProjectInput {
  name: String!
  key: String!
  description: String
}

input CreateTeamInput {
  name: String!
}

input CreateIssueInput {
  title: String!
  description: String
  assigneeId: ID
  projectId: ID!
  type: IssueType!
  dueDate: DateTime!
  status: IssueStatus
  sprintId: ID
  parentId: ID
}

input addIssueInput {
  id: ID!
  sprintId: ID!
}

input IssueInput {
  id: ID
  type: IssueType
}

input CreateSprintInput {
  title: String!
  description: String
  projectId: ID!
  dueDate: DateTime!
  status: SprintStatus
  issues: [IssueInput]
}

input AssignIssueInput {
  issueId: ID!
  assigneeId: ID!
  projectId: ID!
}

input removeIssueInput {
  issueId: ID!
  projectId: ID!
}

input removeSprintInput {
  sprintId: ID!
  projectId: ID!
}

input addTeamMemberInput {
  memberId: ID!
  teamId: ID!
  role: String!
  projectId: ID!
}

input removeTeamMemberInput {
  memberId: ID!
  teamId: ID!
  projectId: ID!
}

input addProjectTeamInput {
  projectId: ID!
  teamId: ID!
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  profile: ProfileInput
}

input ProfileInput {
  bio: String
  phone: String
  gender: String
  avatar: String
  social: SocialInput
}

input SocialInput {
  github: String
  linkedin: String
  twitter: String
  facebook: String
}

input UpdateIssueInput {
  issueId: String!
  projectId: String!
  title: String
  description: String
  status: IssueStatus
  priority: IssuePriority
  dueDate: DateTime
  type: IssueType
  assigneeId: String
}

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

scalar Date

"""
Custom scalar for password validation
"""
scalar Password

scalar Name

type Query {
  getUserById(userId: ID!): User
  getUserInfo: User
  checkAuth: User
  getUsersBySearch(search: String!): [User]!
  getTeamById(teamId: ID!): Team!
  getAllTeams: [Team]
  getAllUserTeams: [UserTeam]!
  getProjectTeamsMembers(projectId: ID!): [User]
  getIssueById(issueId: ID!, projectId: ID!): Issue!
  getAllIssues(projectId: ID!, sprintId: String): [Issue]
  getAllSprints(projectId: ID!): [Sprint]
  getActiveSprint(projectId: ID!): Sprint
  getSprintById(id: ID!, projectId: ID!): Sprint!
  getRecentProject: Project
  getAllProjects: [Project]
  getProject(projectKey: String, projectId: String): Project
  getProjectStat(projectId: ID!): ProjectStat
}

type Mutation {
  createProject(input: CreateProjectInput!): ResponseMessage!
  createTeam(input: CreateTeamInput!): Team!
  createIssue(input: CreateIssueInput!): ResponseMessage!
  createSprint(input: CreateSprintInput!): ResponseMessage!
  updateIssueStatus(
    projectId: ID!
    issueId: ID!
    status: IssueStatus!
  ): ResponseMessage!
  assineIssue(input: AssignIssueInput!): ResponseMessage!
  signup(input: SignupInput!): ResponseMessage!
  login(input: LoginInput!): AuthData
  removeProject(projectId: ID!): ResponseMessage
  removeIssue(input: removeIssueInput!): ResponseMessage
  removeSprint(input: removeSprintInput!): ResponseMessage
  removeAssineeOfIssue(issueId: ID!): ResponseMessage
  removeTeam(teamId: ID!): ResponseMessage
  addTeamMember(input: addTeamMemberInput!): UserTeam!
  logout: Boolean!
  removeTeamMember(input: removeTeamMemberInput!): Team!
  refreshToken(refreshToken: String!): ExtendSession!
  addIssueInSprint(input: addIssueInput!): ResponseMessage
  addProjectTeam(input: addProjectTeamInput!): ResponseMessage
  sendVerificationLink(email: String!): ResponseMessage
  verifyUser(token: String!): AuthData!
  updateUserProfile(input: UpdateProfileInput!): ResponseMessage!
  updateIssue(input: UpdateIssueInput!): ResponseMessage!
}

enum IssueStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum SprintStatus {
  PLANNED
  ACTIVE
  COMPLETE
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETE
}

enum Gender {
  Male
  Female
  Other
}

enum MemberRole {
  Admin
  Contributor
  Viewer
}

enum IssueType {
  EPIC
  STORY
  TASK
  BUG
}

enum IssuePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ActivityAction {
  LOGGED_TIME
  SPRINT_CREATED
  SPRINT_STARTED
  SPRINT_COMPLETED
  SPRINT_UPDATED
  SPRINT_REMOVED
  ISSUE_ADDED_TO_SPRINT
  ISSUE_REMOVED_FROM_SPRINT
  ISSUE_CREATED
  ISSUE_UPDATED
  ISSUE_DELETED
  ISSUE_ASSIGNED
  ISSUE_UNASSIGNED
  ISSUE_STATUS_CHANGED
  ISSUE_PRIORITY_CHANGED
  PROJECT_CREATED
  PROJECT_UPDATED
  PROJECT_DELETED
  PROJECT_TEAM_ADDED
  PROJECT_TEAM_REMOVED
  TEAM_CREATED
  TEAM_UPDATED
  TEAM_MEMBER_ADDED
  TEAM_MEMBER_REMOVED
  TEAM_MEMBER_ROLE_CHANGED
  COMMENTED
  COMMENT_DELETED
}

enum EntityType {
  PROJECT
  TEAM
  SPRINT
  ISSUE
  COMMENT
  USER
}

interface Error {
  message: String!
}

interface FieldError {
  message: String!
  path: [String!]!
}

type UnauthenticatedError implements Error {
  message: String!
}

type UnauthorizedError implements Error {
  message: String!
}
